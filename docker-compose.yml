
services:
  api-producer:
    container_name: api-producer
    build:
      context: ./api-producer
      dockerfile: Dockerfile
      target: final
    environment:
      RABBIT_USER: guest
      RABBIT_PASS: guest
      RABBIT_HOSTNAME: rabbitmq
      RABBIT_PORT: 5672
      PORT: 8080
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - app_network

  database-service-consumer:
    container_name: database-service-consumer
    build:
      context: ./database-service-consumer
      dockerfile: Dockerfile
      target: final
    environment:
      DATABASE: host=postgres port=5432 user=postgres password=postgres dbname=mydb sslmode=disable
      RABBIT_USER: guest
      RABBIT_PASS: guest
      RABBIT_HOSTNAME: rabbitmq
      RABBIT_PORT: 5672
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network

  postgres:
    container_name: postgres
    image: postgres:16-alpine
    restart: always
    volumes:
      - ./scripts/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mydb
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4.0-management
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

networks:
  app_network:
