// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	app "github.com/golang-rabbit-sample/database-service-consumer/internal/app"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddPerson provides a mock function with given fields: person
func (_m *Repository) AddPerson(person *app.Person) error {
	ret := _m.Called(person)

	if len(ret) == 0 {
		panic("no return value specified for AddPerson")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.Person) error); ok {
		r0 = rf(person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
