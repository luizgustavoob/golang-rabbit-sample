// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	rabbit "github.com/golang-rabbit-sample/api-producer/internal/infrastructure/rabbit"
	mock "github.com/stretchr/testify/mock"
)

// Producer is an autogenerated mock type for the Producer type
type Producer struct {
	mock.Mock
}

// Produce provides a mock function with given fields: queue, message
func (_m *Producer) Produce(queue string, message rabbit.Serializable) error {
	ret := _m.Called(queue, message)

	if len(ret) == 0 {
		panic("no return value specified for Produce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, rabbit.Serializable) error); ok {
		r0 = rf(queue, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProducer creates a new instance of Producer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Producer {
	mock := &Producer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
